---
description: - PEP8 준수: 4칸 들여쓰기, 최대 라인 길이 79자, 변수/함수명은 snake_case 사용.
- 모듈 임포트는 파일 상단에: 표준 라이브러리 먼저, 그다음 써드파티(예: fastapi, yfinance, pymysql, pytz, asyncio, uvicorn).
- 함수에 독스트링 추가: 목적, 매개변수, 반환값 설명.
- 가능하면 타입 힌트 사용: 예: async def func(symbol: str) -> list[dict].
- FastAPI 애플리케이션 구조: `@app.on_event("startup")`로 주기적 작업 실행, `asyncio.create_task`로 비동기 태스크 관리.
- 예외를 깔끔히 처리: 데이터 요청/저장 시 try-except 사용, 에러는 print 또는 logging으로 기록.
- 하드코딩 피하기: 종목, DB 인증 정보, 간격(예: INTERVAL = 10) 등은 변수/설정으로 관리.
- DB 작업 최적화: 벌크 삽입(`executemany`)으로 오버헤드 감소.
- 실행 시간 로그: 사이클 소요 시간을 측정해 출력, FastAPI 로그와 통합 가능.
- 전역 변수 사용 금지: 매개변수로 명시적 전달.
- 주요 섹션에 주석 추가: 장 시간 확인, 데이터 요청 로직, 10초 간격과 1분 데이터 갱신 이유, FastAPI 백그라운드 태스크 설명.
- 비동기 호환성 보장: FastAPI와 asyncio 통합, async def로 메인 함수 정의, await로 sleep/gather 호출.
- yfinance rate limit 테스트: 에러(예: 429 Too Many Requests) 발생 시 sleep 또는 재시도 로직 추가 가능.
- MySQL 연결: with 문(context manager) 또는 commit/close로 연결 누수 방지.
- FastAPI 서버 실행: uvicorn으로 실행, 기본 설정은 host="0.0.0.0", port=8000.
- 기능 추가 시 효율성 우선: asyncio로 충분하면 스레드 사용 금지, 불필요한 엔드포인트 최소화.
globs:
alwaysApply: false
---
